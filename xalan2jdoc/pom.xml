<!-- ================================================================
Xalan has been using a custom doclet to produce additional index pages
for deprecated classes, constants, and so on. This is a decompiled
version of it.

unfortunately, THIS WILL NOT CURRENTLY BUILD, since it depends on the
com.sun.tools.doclets API, which was replaced around Java 8 or 9 by
jdk.javadoc.doclet API. It could be rewritten based on the latter,
but I haven't yet wanted to invest cycles in it.

However it *does* still seem to run (mostly?) when javadoc is told to
use it. Either that, or we're falling back to the "standard" doclet
and it produces very similar output.

So... I've put the jarfile we decompiled this from into a legacy_blob/
directory, and invoking that. The source here is currently considered just
documentation, and xalan-project does NOT declare it as a child module
so no attempt is made to actual build the POM (which would fail).

It isn't good. But it isn't worse than the ant-based build, and is
better than nothing. At least it seems to produce the previously
missing allclasses, constant_values, deprecated_list, help_doc,
index-all and index HTML files
================================================================ -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>xalan</groupId>
    <artifactId>xalan-project</artifactId>
    <version>2.7.3</version>
  </parent>

  <artifactId>xalan2jdoclet</artifactId>
  <name>@xsl.usage doclet JDK 8</name>
  <description>
    Implementation of an indexing doclet used in the Xalan package's javadoc.
    Its output includes:
    allclasses_frame.html
    allclasses_noframe.html
    constant_values.html
    deprecated_list.html
    help_doc.html
    index_all.html
    index.html
  </description>

  <dependencies>
    <!-- Automatically depends on tools.jar up to JDK 8, but not on JDK 9+.
         This way, we do not need to manually define profiles for this task.
    -->
    <dependency>
      <groupId>com.github.olivergondza</groupId>
      <artifactId>maven-jdk-tools-wrapper</artifactId>
      <version>0.1</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Copy generated jarfile up to xalan-java/build/,
           for backward compatibility with Ant builds. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

</project>
